// <auto-generated />
using System;
using DataEmploy.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataEmploy.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230206042757_createDb")]
    partial class createDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DataEmploy.Models.AccountRoles", b =>
                {
                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Role_Id")
                        .HasColumnType("int");

                    b.HasKey("NIK", "Role_Id");

                    b.HasIndex("Role_Id");

                    b.ToTable("AccountRoles");
                });

            modelBuilder.Entity("DataEmploy.Models.Accounts", b =>
                {
                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NIK");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("DataEmploy.Models.Departments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Manager_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Manager_Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DataEmploy.Models.Employees", b =>
                {
                    b.Property<string>("NIK")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("Date");

                    b.Property<int?>("Departement_Id")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Manager_Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.HasKey("NIK");

                    b.HasIndex("Departement_Id");

                    b.HasIndex("Manager_Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DataEmploy.Models.Roles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataEmploy.Models.AccountRoles", b =>
                {
                    b.HasOne("DataEmploy.Models.Accounts", "Accounts")
                        .WithMany("AccountRoles")
                        .HasForeignKey("NIK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataEmploy.Models.Roles", "Roles")
                        .WithMany("AccountRoles")
                        .HasForeignKey("Role_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Accounts");

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("DataEmploy.Models.Accounts", b =>
                {
                    b.HasOne("DataEmploy.Models.Employees", "Employees")
                        .WithOne("Account")
                        .HasForeignKey("DataEmploy.Models.Accounts", "NIK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DataEmploy.Models.Departments", b =>
                {
                    b.HasOne("DataEmploy.Models.Employees", "Employees")
                        .WithMany()
                        .HasForeignKey("Manager_Id");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DataEmploy.Models.Employees", b =>
                {
                    b.HasOne("DataEmploy.Models.Departments", "Departements")
                        .WithMany()
                        .HasForeignKey("Departement_Id");

                    b.HasOne("DataEmploy.Models.Employees", "Manager")
                        .WithMany()
                        .HasForeignKey("Manager_Id");

                    b.Navigation("Departements");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("DataEmploy.Models.Accounts", b =>
                {
                    b.Navigation("AccountRoles");
                });

            modelBuilder.Entity("DataEmploy.Models.Employees", b =>
                {
                    b.Navigation("Account");
                });

            modelBuilder.Entity("DataEmploy.Models.Roles", b =>
                {
                    b.Navigation("AccountRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
